Name

    OES_texture_stencil8

Name Strings

    GL_OES_texture_stencil8

Contact

    Mathias Heyer, NVIDIA Corporation (mheyer 'at' nvidia.com)

Contributors

    Jeff Bolz, NVIDIA
    Piers Daniell, NVIDIA
    Daniel Koch, NVIDIA
    Mathias Heyer, NVIDIA

Status

    Complete. 
    Ratified by the Khronos Board of Promoters on 2014/03/14.

Version

    Last Modified Date:         January 30, 2014
    Revision:                   9

Number

    OpenGL ES Extension #173

Dependencies

    This extension is written against the OpenGL ES 3.0.2 (April 8, 2013)
    specification.

    OES_stencil_texturing is requried.

    OpenGL ES 3.1 interacts with this extension

Overview

    This extension accepts STENCIL_INDEX8 as a texture internal format, and
    adds STENCIL_INDEX8 to the required internal format list. This removes the
    need to use renderbuffers if a stencil-only format is desired.

New Procedures and Functions

    None.

New Tokens

    Accepted by the <format> parameter of TexImage3D, TexImage2D
    TexSubImage3D and TexSubImage2D:

        STENCIL_INDEX           0x1901  /* existing enum */

    Accepted by the <internalformat> parameter of TexImage3D, TexImage2D,
    TexStorage3D, TexStorage2D, TexStorage3DMultisample
    and TexStorage2DMultisample:

        STENCIL_INDEX8          0x8D48  /* existing enum */

Changes to Section 2.11.9 of the OpenGL ES 3.0 Specification
(Shader Execution)

    In subsection 'Texture Access' modify the paragraph
    introduced by OpenGL ES 3.1:

    "Texture lookups involving texture objects with an internal format of
    DEPTH_STENCIL can read the stencil value as described in section
    3.8.7 by setting the DEPTH_STENCIL_TEXTURE_MODE to STENCIL_INDEX.
    The stencil value is read as an integer and assigned to R_t. An unsigned
    integer sampler should be used to lookup the stencil component, otherwise
    the results are undefined."

    to:

    "Texture lookups involving texture objects with an internal format of
    DEPTH_STENCIL can read the stencil value as described in section
    3.8.7 by setting the DEPTH_STENCIL_TEXTURE_MODE to STENCIL_INDEX.
    Textures with a STENCIL_INDEX base internal format may also be used
    to read stencil data.
    The stencil value is read as an integer and assigned to R_t. An unsigned
    integer sampler should be used to lookup the stencil component, otherwise
    the results are undefined.


Additions to Section 3.7.2 of the OpenGL ES 3.0 Specification
(Transfer of Pixel Rectangles)

    Addition to Table 3.5 Pixel data formats.

        Format Name   |  Element Meaning   | Target buffer
        ---------------------------------------------------------------
        STENCIL_INDEX | Stencil Index      | Stencil


    Add a row to Table 3.2 Valid combinations of format, type and sized
    internal formats:

        Format          Type            External Bytes  Internal Format
                                        per Pixel
        --------------- --------------- --------------- ---------------
        STENCIL_INDEX   UNSIGNED_BYTE   1               STENCIL_INDEX8


Additions to Section 3.8.3 of the OpenGL ES 3.0 Specification
(Texture Image Specification)

    Add a row to Table 3.11: Conversion from RGBA, depth, and stencil pixel
    components to internal texture, table, or filter components

        Base Internal Format    RGBA, Depth, and Stencil Values     Internal Components
        --------------------    -------------------------------     -------------------
        STENCIL_INDEX           Stencil                             S


    Modify the second paragraph of p. 125 to include STENCIL_INDEX:

    "Textures with a base internal format of DEPTH_COMPONENT, DEPTH_STENCIL,
    or STENCIL_INDEX are supported by texture image specification commands only
    if <target> is..."


    Add to the list of required texture internal formats:

        - Stencil formats: STENCIL_INDEX8


    Add rows to Table 3.13: Correspondence of sized internal depth and stencil
    formats to base internal formats, internal data type, and desired component
    resolutions for each sized internal format

        Sized Internal Format       Base Internal Format    D bits      S bits
        ---------------------       --------------------    ---------   ------
        STENCIL_INDEX8              STENCIL_INDEX           <blank>     8

Additions to Section 3.8.5 of the OpenGL ES 3.0 Specification
(Alternate Texture Image Specification Commands)

        In Table 3.15 (Valid CopyTexImage source framebuffer/destination
        texture base internal format combinations):
        Add row 'S' and column 'S' and leave all the format combinations
        involving 'S' marked unsupported.


Modify 3.8.13 Texture Completeness, p. 156

    Add a bullet to the list of reasons a texture would be incomplete:

    - The internal format of the texture is STENCIL_INDEX and either the
      magnification filter is not NEAREST, or the minification filter is
      neither NEAREST nor NEAREST_MIPMAP_NEAREST.

Modify 3.8.15 Depth Texture Comparison Mode, p. 158

    Add the sentence
        "If the base internal format is STENCIL_INDEX, then r = St"


Additions to Section 4.3.1 of the OpenGL ES 3.0 Specification
(Reading Pixels):

    Add STENCIL_INDEX to the first sentence of the second
    paragraph on p. 188:

    "The second is an implementation-chosen format from among those defined
    in table 3.2, excluding formats DEPTH_COMPONENT, DEPTH_STENCIL and
    STENCIL_INDEX."

Dependencies on OpenGL ES 3.1

    If OpenGL ES 3.1 is not supported, remove all
    references to TexStorage3DMultisample and TexStorage2DMultisample.

New Implementation Dependent State

    None.

New State

    None.

Modifications to the OpenGL ES Shading Language Specification, Version 3.00

    None.

Errors

    An INVALID_OPERATION error is generated by TexImage3D, TexImage2D,
    TexSubImage3D, TexSubImage2D if <format> is STENCIL_INDEX and the
    base internal format is not <STENCIL_INDEX>.

    An INVALID_OPERATION error is generated by TexImage3D, TexImage2D,
    TexSubImage3D or TexSubImage2D, if <format> is STENCIL_INDEX and
    <target> is not one of TEXTURE_2D, TEXTURE_2D_ARRAY and TEXTURE_CUBE_MAP_*.

    An INVALID_OPERATION error is generated by TexImage3D, TexImage2D,
    TexSubImage3D or TexSubImage2D, if <format> is STENCIL_INDEX and
    <type> is not <UNSIGNED_BYTE>

    An INVALID_OPERATION error is generated by TexImage3D and TexImage2D,
    if <format> is <STENCIL_INDEX> and internal format is not <STENCIL_INDEX8>

Issues

    (1) What is the interaction with OpenGL ES 3.1's
        DEPTH_STENCIL_TEXTURE_MODE?

    RESOLVED: That piece of state is ignored because the base internal format
    of a STENCIL_INDEX texture is not DEPTH_STENCIL.

    (2) Does the presence of this extension imply that the implementation
    supports a true 8-bit stencil buffer?

    RESOLVED: No, some OpenGL implementations may internally expand a
    format like STENCIL_INDEX8 to DEPTH24_STENCIL8, but will make such a format
    behave as if there were no depth bits.  Additionally, implementations may
    not support independent depth and stencil attachments; a framebuffer with a
    STENCIL_INDEX8 stencil attachment and a DEPTH_COMPONENT24 depth attachment
    may be treated as unsupported (FRAMEBUFFER_UNSUPPORTED).

    (3) Should we support stencil formats that have a number of bits that is
    not exactly supported in the implementation? 8-bits is universally
    supported, but 1/4/16-bits are not.

    RESOLVED: Only accept STENCIL_INDEX8, which is universally supported.

Revision History

    Rev.    Date    Author    Changes
    ----  --------  --------  -----------------------------------------------
     1    03/20/12  jbolz     Internal revisions.
     2    05/30/12  dgkoch    Add tokens and errors section.
                              Update errors for GetTexImage.
     3    07/23/13  mheyer    Take ARB_texture_stencil8 and reword it for
                              ES 3.0
     4    08/06/13  mheyer    Allow NEAREST_MIPMAP_NEAREST as filter.
     5    08/30/13  mheyer    Add interactions with multisample textures.
     6    09/03/13  mheyer    CopyTexImage2D does not support stencil textures
     7    10/16/13  mheyer    Add entry to Table 3.5, added modification to
                              section 2.11.9 and extended Errors section.
     8    01/20/14  dkoch     Fix name of interacting extension.
                              Remove trailing whitespace.
     9    01/30/14  dkoch     Rename to OES.

