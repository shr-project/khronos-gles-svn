Name

|   OES_shader_image_atomic

Name Strings

|   OES_shader_image_atomic

Contact

|   Bill Licea-Kane, Qualcomm Technologies, Inc. ( billl 'at' qti.qualcomm.com )

Contributors

|   Jeff Bolz, NVIDIA
|   Pat Brown, NVIDIA
|   Daniel Koch, NVIDIA
|   Jon Leech
    Barthold Lichtenbelt, NVIDIA
    Bill Licea-Kane, AMD
    Eric Werness, NVIDIA
    Graham Sellers, AMD
    Greg Roth, NVIDIA
    Nick Haemel, AMD
    Pierre Boudier, AMD
    Piers Daniell, NVIDIA

Notice

    Copyright (c) 2011-2013 The Khronos Group Inc. Copyright termsat
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. 
    Ratified by the Khronos Board of Promoters on 2014/03/14.

Version

    Last Modified Date:         2014-03-04
    Revision:                   4

Number

    OpenGL ES Extension #171

Dependencies

    This extension is written against the
    OpenGL ES Version 3.1 DRAFT (January 30, 2014) specification.

    This extension is written against version 3.10 of the OpenGL ES
    Shading Language Revision 1 (working) 16 January 2014 specification
    (31 January 2014 dawn edition)

    OpenGL ES 3.0 and GLSL ES 3.00 are required.

    OES_shader_image_load_store is required.

Overview

    This extension provides GLSL built-in functions allowing shaders
    to perform atomic read-modify-write operations to a single level of
    a texture object from any shader stage.  These built-in
    functions are named imageAtomic*(), and accept integer texel
    coordinates to identify the texel accessed.  These built-in
    functions extend the Images added by OES_shader_image_load_store.

Additions to Chapter 2 of the OpenGL ES 3.1 specification
(Operation)

Section 2.11.10, Images, p. 106

Change the first sentence of the First Paragraph, p. 106:

    Images are special uniforms used in the OpenGL Shading Language to
    identify a level of a texture to be read or written using image load,
|   store, and atomic built-in functions...


Change the first sentence of the Third Paragraph, p. 106:

    The type of an image variable must match the texture target of the image
    currently bound to the image unit, otherwise the result of a load, store,
|   or atomic operation...

Section 2.12, Shader Memory Access, p. 119

Change the first sentence of the First Paragraph, p. 119:

    Shaders may perform random-access reads and writes to texture or buffer
|   object memory using built-in image load, store, and atomic functions...

Additions to Chapter 3 of the OpenGL ES 3.1 specification
(Rasterization)

Section 3.10, Texture Image Loads and Stores, p. 217

Change the caption to Table 3.25, p. 220

|       Table 3.25, Mapping of image load, store, and atomic...

Change the first sentence of the Second Paragraph on p. 220

    When a shader accesses the texture bound to an image unit using a built-in
|   image load, store or atomic function...

Change the first sentence of the Fourth Paragraph on p. 220

    If the individual texel identified for an image
|   load, store, or atomic operation...

Insert a sentence in the Forth Paragraph on p. 219, before
"An access is considered invalid if:"

|   Invalid image atomics will not update any texture bound to
|   the image unit and will return zero.

Change first and second sentence of the First Paragraph on p. 221

    Additionally, there are a number of cases where image
|   load, store, or atomic operations
    are considered to involve a
    format mismatch.  In such cases, undefined values will be returned
|   by image loads and atomic operations
    and undefined values will be written by
|   stores and atomic operations.

Change first sentence of Second Paragraph on. p. 220

    For textures with multiple samples per texel, the sample selected for an
|   image load, store, or atomic...

Change the first sentence of the First Paragraph on p. 222

    Any image variable used for shader
|   loads, stores or atomic memory operations...

Change the First Paragraph on p. 223

    When the format associated with an image unit does not exactly match the
    internal format of the texture bound to the image unit,
|   image loads, stores and atomic operations
    re-interpret the memory holding the
    components of an accessed texel according to the format of the image unit.
    The re-interpretation for image loads
|   and the read portion of image atomics
    is performed as though data were copied from the texel of the
    bound texture to a similar texel represented in the format of the image
    unit.  Similarly, the re-interpretation for image stores
|   and the write portion of image atomics...

Additions to Chapter 6 of the OpenGL ES 3.1 specification
(State and State Requests)

Section 6.2 State Tables, Table 6.49: Implementation Dependent
Aggregate Shader Limits(cont), p. 368

Change Description of MAX_IMAGE_UNITS:

    No. of units for image
|   load/store/atomics

Additions to Appendix A of the OpenGL ES 3.1 specification

Section A.1 Repeatability, p. 372

Change the third sentence of the First Paragraph in Section A.1, p. 372

    This repeatability requirement doesn't apply when using shaders containing
    side effects (image stores,
|   image atomic operations, ...

Section A.3 Invariance Rules, p. 373

Change the last sentence of Rule 4, p. 374

    Invariance is relaxed for shaders with side effects,
|   such as image stores, image atomic operations, and atomic
|   counters...

Change the first sentence of the Second Paragraph of Rule 5, p. 374

    If a sequence of GL commands specifies primitives to be
    rendered with shaders containing side effects (image stores,
|   image atomic operations...

Change the first sentence of Rule 6, p. 375

    For any given GL and framebuffer state vector, and for any
    given GL command, the contents of any framebuffer state not
    directly or indirectly affected by results of shader image stores,
|   image atomic operations...

Change the first bullet of Rule 7, p. 375

    * shader invocations do not use
|     image atomic operations
      or atomic counters...

Change the first sentence of the Second Paragraph of Rule 7, p. 375

    When any sequence of GL commands triggers shader
    invocations that perform image stores,
|   image atomic operations...

Additions to Appendix D of the OpenGL ES 3.1 specification
Shared Objects and Multiple Contexts

Section D.3 Propagating Changes to Objects, p. 408-409

Change seventh (last) bullet of the Fifth Paragraph, pp.

     * Rendering commands that trigger shader invocations,
       where the shader performs image stores,
|      image atomic operations...


-----

Modifications to the OpenGL ES Shading Language Specification, Version 3.00

|   Including the following line in a shader can be used to control the
|   language features described in this extension:
|
|     #extension GL_OES_shader_image_atomic : <behavior>
|
|   where <behavior> is as specified in section 3.3.
|
|   New preprocessor #defines are added to the OpenGL Shading Language:
|
|     #define GL_OES_shader_image_atomic

Modifications to Chapter 4 Variables and Types
of the OpenGL ES 3.1 Shading Language specification

Section 4.1.7.2 Images, p. 29

Change first sentence of the Second Paragraph, p. 29

    Image variables are used in the image load, store, and
|   atomic functions...

Section 4.4.7 Format Layout Qualifiers, p. 57

Change the last sentence of Section 5.4.7, p. 59

   Any image variable must specify a format layout qualifier;
   it is an error to pass an image uniform variable
   or function parameter declared without a format layout qualifier
   to an image load, store or
|  atomic function.


Add to Section 9.11 Image Functions, p. 127

Add new overview and syntax and description table following existing
Image Functions table, p. 128

    The atomic functions perform operations on individual texels or samples
    of an image variable.  Atomic memory operations read a value from the
    selected texel, compute a new value using one of the operations described
    below, write the new value to the selected texel, and return the
    original value read.  The contents of the texel being updated by the
    atomic operation are guaranteed not to be updated by any other image store
    or atomic function between the time the original value is read and the
    time the new value is written.

    As with image load and store functions, <image>, <coord>, and <sample>
    specify the individual texel to operate on.  The method for
    identifying the individual texel operated on from <image>, <coord>, and
    <sample>, and the method for reading and writing the texel are specified
|   in Section 3.8.X of the OpenGL ES specification.  Atomic memory operations
    are supported on only a subset of all image variable types; <image> must
    be either:

      * an image variable with signed integer components (iimage*) and a
        format qualifier of "r32i", or

      * an image variable with unsigned integer components (uimage*) and a
        format qualifier of "r32ui", or

|     * an image variable with float components (image*) and a
|       format qualifier of "r32f" (imageAtomicExchange only).

    Syntax:

|     highp uint      imageAtomicAdd(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicAdd(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicMin(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicMin(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicMax(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicMax(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicAnd(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicAnd(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicOr(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicOr(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicXor(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicXor(coherent IMAGE_INFO, int data);

|     highp uint      imageAtomicExchange(coherent IMAGE_INFO, uint data);
|     highp int       imageAtomicExchange(coherent IMAGE_INFO, int data);
|     highp float     imageAtomicExchange(coherent IMAGE_INFO, float data);

|     highp uint      imageAtomicCompSwap(coherent IMAGE_INFO, uint compare, uint data);
|     highp int       imageAtomicCompSwap(coherent IMAGE_INFO, int compare, int data);

    Description:

    imageAtomicAdd() computes a new value by adding the value of <data> to the
    contents of the selected texel.  These functions support 32-bit unsigned
    integer operands and 32-bit signed integer operands.

    imageAtomicMin() computes a new value by taking the minimum of the value
    of <data> and the contents of the selected texel.  These functions support
    32-bit signed and unsigned integer operands.

    imageAtomicMax() computes a new value by taking the maximum of the value
    of <data> and the contents of the selected texel.  These functions support
    32-bit signed and unsigned integer operands.

    imageAtomicAnd() computes a new value by performing a bitwise and of the
    value of <data> and the contents of the selected texel.  These functions
    support 32-bit signed and unsigned integer operands.

    imageAtomicOr() computes a new value by performing a bitwise or of the
    value of <data> and the contents of the selected texel.  These functions
    support 32-bit signed and unsigned integer operands.

    imageAtomicXor() computes a new value by performing a bitwise exclusive or
    of the value of <data> and the contents of the selected texel.  These
    functions support 32-bit signed and unsigned integer operands.

|   imageAtomicExchange() computes a new value by simply copying the value of
|   <data>.  These functions support 32-bit signed and unsigned integer
|   operands, and 32-bit float operands.

    imageAtomicCompSwap() compares the value of <compare> and the contents of
    the selected texel.  If the values are equal, the new value is given by
    <data>; otherwise, it is taken from the original value loaded from the
    texel.  These functions support 32-bit signed and unsigned integer
    operands.

Issues

    (0)  This extension is based on ARB_shader_image_load_store.  What
         are the major differences?

         1 - This extension splits out only the image atomic operations
             from ARB_shader_image_load_store.
         2 - It depends on (unpublished) XXX_shader_image_load_store
             functionality that is also part of OpenGL ES 3.1, and inherits
             the differences from that specification. For those differences,
             see Issue 0 in XXX_shader_image_load_store.

    (1) Should the shading language built-ins have OES suffixes?

        RESOLVED: No. Per Bug 11637, the WG made a policy decision
        that GLSL ES identifiers imported without semantic change
        or subsetting as OES extensions from core GLSL do not carry
        suffixes. The #extension mechanism must still be used to
        enable the appropriate extension before the functionality can
        be used.

Revision History

    Rev.  Date        Author    Changes
    1     2014-01-30  wwlk      Initial draft
    2     2014-01-31  wwlk      Update to current draft base specs
                                (further updates coming as
                                additional draft specs done.
                                Otherwise, this spec is probably
                                ready to review.)
    3     2014-02-11  dkoch     remove GLSL builtin suffixes per issue 1.
    4     2014-03-04  dkoch     add coherent to image parameter (Bug 11595)
